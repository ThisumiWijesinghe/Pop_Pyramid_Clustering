# -*- coding: utf-8 -*-
"""pop_pyramid_Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nlTs9Jc-ShWTbVy7dYiVHHtip2rKAr0S

# Task: Develop a method to cluster countries based on pop pyramids ( Using age_Dataset)

#KMeans Clustering Method
"""

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

"""##Used age_data.csv and it contains 21 age groups per country for 2021"""

df = pd.read_csv('age_data.csv',low_memory=False)

df = df[['Location','Time', 'AgeGrpStart','PopTotal']]

#Filter for 2021 year
year_to_use = 2021
df = df[df['Time'] == 2021]

df.dropna(subset=['Location','AgeGrpStart','PopTotal'],inplace=True)

df['AgeGrpStart'] = df['AgeGrpStart'].astype(int)
df['PopTotal'] = df['PopTotal'].astype(float)

pivot_df = df.pivot_table(index=['Location'], columns= 'AgeGrpStart', values='PopTotal', fill_value=0)

pivot_df = pivot_df.reindex(columns=sorted(pivot_df.columns),fill_value=0)

pivot_df  = pivot_df[[col for col in sorted(pivot_df.columns)]]

pivot_norm = pivot_df.div(pivot_df.sum(axis=1), axis=0)

scaler = StandardScaler()
data_scaled = scaler.fit_transform(pivot_norm)

#PCA
from sklearn.decomposition import PCA
pca = PCA(n_components=2)
data_2d = pca.fit_transform(data_scaled)

#Variance explained Plot
plt.figure(figsize=(6,4))
plt.bar(range(1, len(pca.explained_variance_ratio_)+1), pca.explained_variance_ratio_*100)
plt.xlabel('Principal Component')
plt.ylabel('Variance Explained(%)')
plt.title('PCA Variance Explained ')
plt.show()

k = 4
kmeans = KMeans(n_clusters=k, random_state=42)
clusters_kmeans = kmeans.fit_predict(data_scaled)

pivot_norm['Cluster'] = clusters_kmeans
pivot_norm.reset_index()[['Location','Cluster']].to_csv('kmeans_countries.csv',index=False)

plt.figure(figsize=(8,6))
sns.scatterplot(x=data_2d[:,0],y=data_2d[:,1],hue=clusters_kmeans,palette='tab10')
plt.title('KMeans Clusters (2021)')
plt.xlabel('PCA 1')
plt.ylabel('PCA 2')
plt.legend(title='Cluster')
plt.show()

for cluster_num in range(k):
  cluster_data = pivot_norm[pivot_norm['Cluster'] == cluster_num].drop(columns='Cluster')
  mean_pyramid = cluster_data.mean()

  plt.figure(figsize=(12,6))
  sns.barplot(x=mean_pyramid.index.astype(str), y=mean_pyramid.values)
  plt.title(f'Average Population Pyramid for cluster {cluster_num}({2021})')
  plt.xlabel('Age Group Start')
  plt.ylabel('Proportion of Population')
  plt.xticks(rotation=45)
  plt.show()

  pivot_norm.reset_index()[['Location', 'Cluster']].to_csv('clustered_countries.csv', index=False)

from sklearn.cluster import DBSCAN , SpectralClustering

#DBSCAN
dbscan = DBSCAN(eps=0.8, min_samples=7)
dbscan_labels = dbscan.fit_predict(data_scaled)
pivot_norm['DBSCAN_Cluster'] = dbscan_labels

#Analyze DBSCAN clusters
for cluster_num in sorted(set(dbscan_labels)):
  if cluster_num == -1:
    print("Noise points (not assigned to any cluster)")
    continue
  cluster_data = pivot_norm[pivot_norm['DBSCAN_Cluster'] == cluster_num].drop(columns=['Cluster','DBSCAN_Cluster'])
  mean_pyramid = cluster_data.mean()
  plt.figure(figsize=(12,6))
  sns.barplot(x=mean_pyramid.index.astype(str), y=mean_pyramid.values)
  plt.title(f'Average Population Pyramid for DBSCAN cluster {cluster_num} (2021)')
  plt.xlabel('Age Group Start')
  plt.ylabel('Proportion of Population')
  plt.xticks(rotation=45)
  plt.show()

#Spectral Clustering
spectral = SpectralClustering(n_clusters=4, random_state=42)
spectral_labels = spectral.fit_predict(data_scaled)
pivot_norm['Spectral_Cluster'] = spectral_labels

for cluster_num in range(4):
  cluster_data = pivot_norm[pivot_norm['Spectral_Cluster'] == cluster_num].drop(columns=['Cluster','DBSCAN_Cluster','Spectral_Cluster'])
  mean_pyramid = cluster_data.mean()
  plt.figure(figsize=(12,6))
  sns.barplot(x=mean_pyramid.index.astype(str), y=mean_pyramid.values)
  plt.title(f'Average Population Pyramid for Spectral cluster {cluster_num} (2021)')
  plt.xlabel('Age Group Start')
  plt.ylabel('Proportion of Population')
  plt.xticks(rotation=45)
  plt.show()

#Scatter Plot for DBSCAN
plt.figure(figsize=(10, 7))
sns.scatterplot(x=data_2d[:, 0], y=data_2d[:, 1], hue=pivot_norm['DBSCAN_Cluster'], palette='tab10', s=50)
plt.title("DBSCAN Clusters (2021)")
plt.xlabel("PCA Component 1")
plt.ylabel("PCA Component 2")
plt.legend(title='Cluster')
plt.show()

# PCA Scatter plot for Spectral Clusters
plt.figure(figsize=(10, 7))
sns.scatterplot(x=data_2d[:, 0], y=data_2d[:, 1], hue=pivot_norm['Spectral_Cluster'], palette='tab10', s=50)
plt.title("Spectral Clusters (2021)")
plt.xlabel("PCA Component 1")
plt.ylabel("PCA Component 2")
plt.legend(title='Cluster')
plt.show()